{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { computed, ref } from 'vue';\nimport { useStore } from 'vuex';\nimport { mdiEye, mdiTrashCan } from '@mdi/js';\nimport ModalBox from '@/components/ModalBox.vue';\nimport CheckboxCell from '@/components/CheckboxCell.vue';\nimport Level from '@/components/Level.vue';\nimport JbButtons from '@/components/JbButtons.vue';\nimport JbButton from '@/components/JbButton.vue';\nimport UserAvatar from '@/components/UserAvatar.vue';\nexport default {\n  props: {\n    checkable: Boolean\n  },\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    expose();\n    var store = useStore();\n    var darkMode = computed(function () {\n      return store.state.darkMode;\n    });\n    var items = computed(function () {\n      return store.state.clients;\n    });\n    var isModalActive = ref(false);\n    var isModalDangerActive = ref(false);\n    var perPage = ref(10);\n    var currentPage = ref(0);\n    var checkedRows = ref([]);\n    var itemsPaginated = computed(function () {\n      return items.value.slice(perPage.value * currentPage.value, perPage.value * (currentPage.value + 1));\n    });\n    var numPages = computed(function () {\n      return Math.ceil(items.value.length / perPage.value);\n    });\n    var currentPageHuman = computed(function () {\n      return currentPage.value + 1;\n    });\n    var pagesList = computed(function () {\n      var pagesList = [];\n\n      for (var i = 0; i < numPages.value; i++) {\n        pagesList.push(i);\n      }\n\n      return pagesList;\n    });\n\n    var remove = function remove(arr, cb) {\n      var newArr = [];\n      arr.forEach(function (item) {\n        if (!cb(item)) {\n          newArr.push(item);\n        }\n      });\n      return newArr;\n    };\n\n    var checked = function checked(isChecked, client) {\n      if (isChecked) {\n        checkedRows.value.push(client);\n      } else {\n        checkedRows.value = remove(checkedRows.value, function (row) {\n          return row.id === client.id;\n        });\n      }\n    };\n\n    var __returned__ = {\n      store: store,\n      darkMode: darkMode,\n      items: items,\n      isModalActive: isModalActive,\n      isModalDangerActive: isModalDangerActive,\n      perPage: perPage,\n      currentPage: currentPage,\n      checkedRows: checkedRows,\n      itemsPaginated: itemsPaginated,\n      numPages: numPages,\n      currentPageHuman: currentPageHuman,\n      pagesList: pagesList,\n      remove: remove,\n      checked: checked,\n      computed: computed,\n      ref: ref,\n      useStore: useStore,\n      mdiEye: mdiEye,\n      mdiTrashCan: mdiTrashCan,\n      ModalBox: ModalBox,\n      CheckboxCell: CheckboxCell,\n      Level: Level,\n      JbButtons: JbButtons,\n      JbButton: JbButton,\n      UserAvatar: UserAvatar\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/components/ClientsTable.vue"],"names":[],"mappings":";;;AACA,SAAS,QAAT,EAAmB,GAAnB,QAA8B,KAA9B;AACA,SAAS,QAAT,QAAyB,MAAzB;AACA,SAAS,MAAT,EAAiB,WAAjB,QAAoC,SAApC;AACA,OAAO,QAAP,MAAqB,2BAArB;AACA,OAAO,YAAP,MAAyB,+BAAzB;AACA,OAAO,KAAP,MAAkB,wBAAlB;AACA,OAAO,SAAP,MAAsB,4BAAtB;AACA,OAAO,QAAP,MAAqB,2BAArB;AACA,OAAO,UAAP,MAAuB,6BAAvB;;;;;;;;AAMA,QAAM,KAAK,GAAG,QAAQ,EAAtB;AAEA,QAAM,QAAQ,GAAG,QAAQ,CAAC;AAAA,aAAM,KAAK,CAAC,KAAN,CAAY,QAAlB;AAAA,KAAD,CAAzB;AAEA,QAAM,KAAK,GAAG,QAAQ,CAAC;AAAA,aAAM,KAAK,CAAC,KAAN,CAAY,OAAlB;AAAA,KAAD,CAAtB;AAEA,QAAM,aAAa,GAAG,GAAG,CAAC,KAAD,CAAzB;AAEA,QAAM,mBAAmB,GAAG,GAAG,CAAC,KAAD,CAA/B;AAEA,QAAM,OAAO,GAAG,GAAG,CAAC,EAAD,CAAnB;AAEA,QAAM,WAAW,GAAG,GAAG,CAAC,CAAD,CAAvB;AAEA,QAAM,WAAW,GAAG,GAAG,CAAC,EAAD,CAAvB;AAEA,QAAM,cAAc,GAAG,QAAQ,CAC7B;AAAA,aAAM,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAkB,OAAO,CAAC,KAAR,GAAgB,WAAW,CAAC,KAA9C,EAAqD,OAAO,CAAC,KAAR,IAAiB,WAAW,CAAC,KAAZ,GAAoB,CAArC,CAArD,CAAN;AAAA,KAD6B,CAA/B;AAIA,QAAM,QAAQ,GAAG,QAAQ,CAAC;AAAA,aAAM,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,OAAO,CAAC,KAAvC,CAAN;AAAA,KAAD,CAAzB;AAEA,QAAM,gBAAgB,GAAG,QAAQ,CAAC;AAAA,aAAM,WAAW,CAAC,KAAZ,GAAoB,CAA1B;AAAA,KAAD,CAAjC;AAEA,QAAM,SAAS,GAAG,QAAQ,CAAC,YAAM;AAC/B,UAAM,SAAS,GAAG,EAAlB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,KAA7B,EAAoC,CAAC,EAArC,EAAyC;AACvC,QAAA,SAAS,CAAC,IAAV,CAAe,CAAf;AACD;;AAED,aAAO,SAAP;AACD,KARyB,CAA1B;;AAUA,QAAM,MAAM,GAAG,SAAT,MAAS,CAAC,GAAD,EAAM,EAAN,EAAa;AAC1B,UAAM,MAAM,GAAG,EAAf;AAEA,MAAA,GAAG,CAAC,OAAJ,CAAY,UAAA,IAAI,EAAI;AAClB,YAAI,CAAC,EAAE,CAAC,IAAD,CAAP,EAAe;AACb,UAAA,MAAM,CAAC,IAAP,CAAY,IAAZ;AACD;AACF,OAJD;AAMA,aAAO,MAAP;AACD,KAVD;;AAYA,QAAM,OAAO,GAAG,SAAV,OAAU,CAAC,SAAD,EAAY,MAAZ,EAAuB;AACrC,UAAI,SAAJ,EAAe;AACb,QAAA,WAAW,CAAC,KAAZ,CAAkB,IAAlB,CAAuB,MAAvB;AACD,OAFD,MAEO;AACL,QAAA,WAAW,CAAC,KAAZ,GAAoB,MAAM,CAAC,WAAW,CAAC,KAAb,EAAoB,UAAA,GAAG;AAAA,iBAAI,GAAG,CAAC,EAAJ,KAAW,MAAM,CAAC,EAAtB;AAAA,SAAvB,CAA1B;AACD;AACF,KAND","sourcesContent":["<script setup>\nimport { computed, ref } from 'vue'\nimport { useStore } from 'vuex'\nimport { mdiEye, mdiTrashCan } from '@mdi/js'\nimport ModalBox from '@/components/ModalBox.vue'\nimport CheckboxCell from '@/components/CheckboxCell.vue'\nimport Level from '@/components/Level.vue'\nimport JbButtons from '@/components/JbButtons.vue'\nimport JbButton from '@/components/JbButton.vue'\nimport UserAvatar from '@/components/UserAvatar.vue'\n\ndefineProps({\n  checkable: Boolean\n})\n\nconst store = useStore()\n\nconst darkMode = computed(() => store.state.darkMode)\n\nconst items = computed(() => store.state.clients)\n\nconst isModalActive = ref(false)\n\nconst isModalDangerActive = ref(false)\n\nconst perPage = ref(10)\n\nconst currentPage = ref(0)\n\nconst checkedRows = ref([])\n\nconst itemsPaginated = computed(\n  () => items.value.slice(perPage.value * currentPage.value, perPage.value * (currentPage.value + 1))\n)\n\nconst numPages = computed(() => Math.ceil(items.value.length / perPage.value))\n\nconst currentPageHuman = computed(() => currentPage.value + 1)\n\nconst pagesList = computed(() => {\n  const pagesList = []\n\n  for (let i = 0; i < numPages.value; i++) {\n    pagesList.push(i)\n  }\n\n  return pagesList\n})\n\nconst remove = (arr, cb) => {\n  const newArr = []\n\n  arr.forEach(item => {\n    if (!cb(item)) {\n      newArr.push(item)\n    }\n  })\n\n  return newArr\n}\n\nconst checked = (isChecked, client) => {\n  if (isChecked) {\n    checkedRows.value.push(client)\n  } else {\n    checkedRows.value = remove(checkedRows.value, row => row.id === client.id)\n  }\n}\n</script>\n\n<template>\n  <modal-box\n    v-model=\"isModalActive\"\n    title=\"Sample modal\"\n  >\n    <p>Lorem ipsum dolor sit amet <b>adipiscing elit</b></p>\n    <p>This is sample modal</p>\n  </modal-box>\n\n  <modal-box\n    v-model=\"isModalDangerActive\"\n    large-title=\"Please confirm\"\n    button=\"danger\"\n    has-cancel\n  >\n    <p>Lorem ipsum dolor sit amet <b>adipiscing elit</b></p>\n    <p>This is sample modal</p>\n  </modal-box>\n\n  <div\n    v-if=\"checkedRows.length\"\n    class=\"bg-gray-50 p-3 dark:bg-gray-800\"\n  >\n    <span\n      v-for=\"checkedRow in checkedRows\"\n      :key=\"checkedRow.id\"\n      class=\"inline-block bg-gray-100 px-2 py-1 rounded-sm mr-2 text-sm dark:bg-gray-700\"\n    >\n      {{ checkedRow.name }}\n    </span>\n  </div>\n\n  <table>\n    <thead>\n      <tr>\n        <th v-if=\"checkable\" />\n        <th />\n        <th>Name</th>\n        <th>Company</th>\n        <th>City</th>\n        <th>Progress</th>\n        <th>Created</th>\n        <th />\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        v-for=\"client in itemsPaginated\"\n        :key=\"client.id\"\n      >\n        <checkbox-cell\n          v-if=\"checkable\"\n          @checked=\"checked($event, client)\"\n        />\n        <td class=\"image-cell\">\n          <user-avatar\n            :username=\"client.name\"\n            class=\"image\"\n          />\n        </td>\n        <td data-label=\"Name\">\n          {{ client.name }}\n        </td>\n        <td data-label=\"Company\">\n          {{ client.company }}\n        </td>\n        <td data-label=\"City\">\n          {{ client.city }}\n        </td>\n        <td\n          data-label=\"Progress\"\n          class=\"progress-cell\"\n        >\n          <progress\n            max=\"100\"\n            :value=\"client.progress\"\n          >\n            {{ client.progress }}\n          </progress>\n        </td>\n        <td data-label=\"Created\">\n          <small\n            class=\"text-gray-500 dark:text-gray-400\"\n            :title=\"client.created\"\n          >{{ client.created }}</small>\n        </td>\n        <td class=\"actions-cell\">\n          <jb-buttons\n            type=\"justify-start lg:justify-end\"\n            no-wrap\n          >\n            <jb-button\n              color=\"success\"\n              :icon=\"mdiEye\"\n              small\n              @click=\"isModalActive = true\"\n            />\n            <jb-button\n              color=\"danger\"\n              :icon=\"mdiTrashCan\"\n              small\n              @click=\"isModalDangerActive = true\"\n            />\n          </jb-buttons>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div class=\"table-pagination\">\n    <level>\n      <jb-buttons>\n        <jb-button\n          v-for=\"page in pagesList\"\n          :key=\"page\"\n          :active=\"page === currentPage\"\n          :label=\"page + 1\"\n          :outline=\"darkMode\"\n          small\n          @click=\"currentPage = page\"\n        />\n      </jb-buttons>\n      <small>Page {{ currentPageHuman }} of {{ numPages }}</small>\n    </level>\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}