{"ast":null,"code":"import { unref as _unref, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, createElementVNode as _createElementVNode, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex flex-col md:flex-row items-center\"\n};\nconst _hoisted_2 = {\n  class: \"text-center md:text-left\"\n};\nimport { ref, computed, useSlots } from 'vue';\nimport { useStore } from 'vuex';\nimport { mdiClose } from '@mdi/js';\nimport { colorsBg, colorsBorders, colorsOutline } from '@/colors.js';\nimport Level from '@/components/Level.vue';\nimport Icon from '@/components/Icon.vue';\nimport JbButton from '@/components/JbButton.vue';\nexport default {\n  props: {\n    icon: {\n      type: String,\n      default: null\n    },\n    outline: Boolean,\n    color: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(__props) {\n    const props = __props;\n    const componentClass = computed(() => props.outline ? colorsOutline[props.color] : [colorsBg[props.color], colorsBorders[props.color]]);\n    const isDismissed = ref(false);\n\n    const dismiss = () => {\n      isDismissed.value = true;\n    };\n\n    const slots = useSlots();\n    const hasRightSlot = computed(() => slots.right);\n    const store = useStore();\n    const darkMode = computed(() => store.state.darkMode);\n    return (_ctx, _cache) => {\n      return !isDismissed.value ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        class: _normalizeClass([_unref(componentClass), \"px-3 py-6 md:py-3 mx-6 md:mx-0 mb-6 last:mb-0 border rounded transition-colors duration-150\"])\n      }, [_createVNode(Level, null, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [__props.icon ? (_openBlock(), _createBlock(Icon, {\n          key: 0,\n          path: __props.icon,\n          w: \"w-10 md:w-5\",\n          h: \"h-10 md:h-5\",\n          size: \"24\",\n          class: \"md:mr-2\"\n        }, null, 8, [\"path\"])) : _createCommentVNode(\"\", true), _createElementVNode(\"span\", _hoisted_2, [_renderSlot(_ctx.$slots, \"default\")])]), _unref(hasRightSlot) ? _renderSlot(_ctx.$slots, \"right\", {\n          key: 0\n        }) : (_openBlock(), _createBlock(JbButton, {\n          key: 1,\n          icon: _unref(mdiClose),\n          outline: __props.outline || _unref(darkMode) && ['white', 'light'].indexOf(__props.color) < 0,\n          small: \"\",\n          onClick: dismiss\n        }, null, 8, [\"icon\", \"outline\"]))]),\n        _: 3\n      })], 2)) : _createCommentVNode(\"\", true);\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/components/Notification.vue"],"names":[],"mappings":";;;;;;;AACA,SAAS,GAAT,EAAc,QAAd,EAAwB,QAAxB,QAAwC,KAAxC;AACA,SAAS,QAAT,QAAyB,MAAzB;AACA,SAAS,QAAT,QAAyB,SAAzB;AACA,SAAS,QAAT,EAAmB,aAAnB,EAAkC,aAAlC,QAAuD,aAAvD;AACA,OAAO,KAAP,MAAkB,wBAAlB;AACA,OAAO,IAAP,MAAiB,uBAAjB;AACA,OAAO,QAAP,MAAqB,2BAArB;;;;;;;;;;;;;;;;AAcA,UAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,OAAN,GAClC,aAAa,CAAC,KAAK,CAAC,KAAP,CADqB,GAElC,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAP,CAAT,EAAwB,aAAa,CAAC,KAAK,CAAC,KAAP,CAArC,CAF2B,CAA/B;AAIA,UAAM,WAAW,GAAG,GAAG,CAAC,KAAD,CAAvB;;AAEA,UAAM,OAAO,GAAG,MAAM;AACpB,MAAA,WAAW,CAAC,KAAZ,GAAoB,IAApB;AACD,KAFD;;AAIA,UAAM,KAAK,GAAG,QAAQ,EAAtB;AAEA,UAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,KAAb,CAA7B;AAEA,UAAM,KAAK,GAAG,QAAQ,EAAtB;AAEA,UAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,KAAN,CAAY,QAAnB,CAAzB","sourcesContent":["<script setup>\nimport { ref, computed, useSlots } from 'vue'\nimport { useStore } from 'vuex'\nimport { mdiClose } from '@mdi/js'\nimport { colorsBg, colorsBorders, colorsOutline } from '@/colors.js'\nimport Level from '@/components/Level.vue'\nimport Icon from '@/components/Icon.vue'\nimport JbButton from '@/components/JbButton.vue'\n\nconst props = defineProps({\n  icon: {\n    type: String,\n    default: null\n  },\n  outline: Boolean,\n  color: {\n    type: String,\n    required: true\n  }\n})\n\nconst componentClass = computed(() => props.outline\n  ? colorsOutline[props.color]\n  : [colorsBg[props.color], colorsBorders[props.color]])\n\nconst isDismissed = ref(false)\n\nconst dismiss = () => {\n  isDismissed.value = true\n}\n\nconst slots = useSlots()\n\nconst hasRightSlot = computed(() => slots.right)\n\nconst store = useStore()\n\nconst darkMode = computed(() => store.state.darkMode)\n</script>\n\n<template>\n  <div\n    v-if=\"!isDismissed\"\n    :class=\"componentClass\"\n    class=\"px-3 py-6 md:py-3 mx-6 md:mx-0 mb-6 last:mb-0 border rounded transition-colors duration-150\"\n  >\n    <level>\n      <div class=\"flex flex-col md:flex-row items-center\">\n        <icon\n          v-if=\"icon\"\n          :path=\"icon\"\n          w=\"w-10 md:w-5\"\n          h=\"h-10 md:h-5\"\n          size=\"24\"\n          class=\"md:mr-2\"\n        />\n        <span class=\"text-center md:text-left\"><slot /></span>\n      </div>\n      <slot\n        v-if=\"hasRightSlot\"\n        name=\"right\"\n      />\n      <jb-button\n        v-else\n        :icon=\"mdiClose\"\n        :outline=\"outline || (darkMode && ['white', 'light'].indexOf(color) < 0)\"\n        small\n        @click=\"dismiss\"\n      />\n    </level>\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}