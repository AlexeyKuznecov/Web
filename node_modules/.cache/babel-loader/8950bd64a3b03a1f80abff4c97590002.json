{"ast":null,"code":"import { unref as _unref, renderSlot as _renderSlot, resolveDynamicComponent as _resolveDynamicComponent, normalizeClass as _normalizeClass, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nimport { computed } from 'vue';\nexport default {\n  props: {\n    href: {\n      type: String,\n      default: null\n    },\n    to: {\n      type: String,\n      default: null\n    },\n    type: {\n      type: String,\n      default: 'flex'\n    },\n    activeColor: {\n      type: String,\n      default: 'text-blue-600'\n    },\n    hasDivider: Boolean,\n    isDesktopIconOnly: Boolean,\n    dropdown: Boolean,\n    active: Boolean\n  },\n\n  setup(__props) {\n    const props = __props;\n    const is = computed(() => {\n      if (props.href) {\n        return 'a';\n      }\n\n      if (props.to) {\n        return 'router-link';\n      }\n\n      return 'div';\n    });\n    const componentClass = computed(() => {\n      const base = [props.type, 'items-center', 'grow-0', 'shrink-0', 'relative', 'cursor-pointer', 'hover:text-blue-500', props.active ? props.activeColor : 'text-black dark:text-white dark:hover:text-gray-400'];\n\n      if (props.type === 'block') {\n        base.push('lg:flex');\n      }\n\n      if (!props.dropdown) {\n        base.push('py-2', 'px-3');\n      } else {\n        base.push('p-0', 'lg:py-2', 'lg:px-3');\n      }\n\n      if (props.hasDivider) {\n        base.push('lg:border-r', 'lg:border-gray-100', 'lg:dark:border-gray-800');\n      }\n\n      if (props.isDesktopIconOnly) {\n        base.push('lg:w-16', 'lg:justify-center');\n      }\n\n      return base;\n    });\n    const activeClass = computed(() => {\n      return is.value === 'router-link' ? props.activeColor : null;\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createBlock(_resolveDynamicComponent(_unref(is)), {\n        class: _normalizeClass(_unref(componentClass)),\n        to: __props.to,\n        href: __props.href,\n        \"exact-active-class\": _unref(activeClass)\n      }, {\n        default: _withCtx(() => [_renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"class\", \"to\", \"href\", \"exact-active-class\"]);\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/components/NavBarItem.vue"],"names":[],"mappings":";AACA,SAAS,QAAT,QAAyB,KAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,UAAM,EAAE,GAAG,QAAQ,CAAC,MAAM;AACxB,UAAI,KAAK,CAAC,IAAV,EAAgB;AACd,eAAO,GAAP;AACD;;AAED,UAAI,KAAK,CAAC,EAAV,EAAc;AACZ,eAAO,aAAP;AACD;;AAED,aAAO,KAAP;AACD,KAVkB,CAAnB;AAYA,UAAM,cAAc,GAAG,QAAQ,CAAC,MAAM;AACpC,YAAM,IAAI,GAAG,CACX,KAAK,CAAC,IADK,EAEX,cAFW,EAGX,QAHW,EAIX,UAJW,EAKX,UALW,EAMX,gBANW,EAOX,qBAPW,EAQX,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,WAArB,GAAmC,qDARxB,CAAb;;AAWA,UAAI,KAAK,CAAC,IAAN,KAAe,OAAnB,EAA4B;AAC1B,QAAA,IAAI,CAAC,IAAL,CAAU,SAAV;AACD;;AAED,UAAI,CAAC,KAAK,CAAC,QAAX,EAAqB;AACnB,QAAA,IAAI,CAAC,IAAL,CAAU,MAAV,EAAkB,MAAlB;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,IAAL,CAAU,KAAV,EAAiB,SAAjB,EAA4B,SAA5B;AACD;;AAED,UAAI,KAAK,CAAC,UAAV,EAAsB;AACpB,QAAA,IAAI,CAAC,IAAL,CAAU,aAAV,EAAyB,oBAAzB,EAA+C,yBAA/C;AACD;;AAED,UAAI,KAAK,CAAC,iBAAV,EAA6B;AAC3B,QAAA,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,mBAArB;AACD;;AAED,aAAO,IAAP;AACD,KA/B8B,CAA/B;AAiCA,UAAM,WAAW,GAAG,QAAQ,CAAC,MAAM;AACjC,aAAO,EAAE,CAAC,KAAH,KAAa,aAAb,GAA6B,KAAK,CAAC,WAAnC,GAAiD,IAAxD;AACD,KAF2B,CAA5B","sourcesContent":["<script setup>\nimport { computed } from 'vue'\n\nconst props = defineProps({\n  href: {\n    type: String,\n    default: null\n  },\n  to: {\n    type: String,\n    default: null\n  },\n  type: {\n    type: String,\n    default: 'flex'\n  },\n  activeColor: {\n    type: String,\n    default: 'text-blue-600'\n  },\n  hasDivider: Boolean,\n  isDesktopIconOnly: Boolean,\n  dropdown: Boolean,\n  active: Boolean\n})\n\nconst is = computed(() => {\n  if (props.href) {\n    return 'a'\n  }\n\n  if (props.to) {\n    return 'router-link'\n  }\n\n  return 'div'\n})\n\nconst componentClass = computed(() => {\n  const base = [\n    props.type,\n    'items-center',\n    'grow-0',\n    'shrink-0',\n    'relative',\n    'cursor-pointer',\n    'hover:text-blue-500',\n    props.active ? props.activeColor : 'text-black dark:text-white dark:hover:text-gray-400'\n  ]\n\n  if (props.type === 'block') {\n    base.push('lg:flex')\n  }\n\n  if (!props.dropdown) {\n    base.push('py-2', 'px-3')\n  } else {\n    base.push('p-0', 'lg:py-2', 'lg:px-3')\n  }\n\n  if (props.hasDivider) {\n    base.push('lg:border-r', 'lg:border-gray-100', 'lg:dark:border-gray-800')\n  }\n\n  if (props.isDesktopIconOnly) {\n    base.push('lg:w-16', 'lg:justify-center')\n  }\n\n  return base\n})\n\nconst activeClass = computed(() => {\n  return is.value === 'router-link' ? props.activeColor : null\n})\n</script>\n\n<template>\n  <component\n    :is=\"is\"\n    :class=\"componentClass\"\n    :to=\"to\"\n    :href=\"href\"\n    :exact-active-class=\"activeClass\"\n  >\n    <slot />\n  </component>\n</template>\n"]},"metadata":{},"sourceType":"module"}