{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, unref as _unref, isRef as _isRef, vModelDynamic as _vModelDynamic, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"type\", \"name\", \"value\"];\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"check\"\n}, null, -1);\n\nconst _hoisted_3 = {\n  class: \"control-label\"\n};\nimport { computed } from 'vue';\nexport default {\n  props: {\n    options: {\n      type: Object,\n      default: () => {}\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    type: {\n      type: String,\n      default: 'checkbox'\n    },\n    column: Boolean,\n    modelValue: {\n      type: [Object, Array, String, Number],\n      default: null\n    }\n  },\n  emits: ['update:modelValue'],\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const computedValue = computed({\n      get: () => props.modelValue,\n      set: value => {\n        emit('update:modelValue', value);\n      }\n    });\n    const inputType = computed(() => props.type === 'radio' ? 'radio' : 'checkbox');\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: _normalizeClass([\"flex justify-start flex-wrap -mb-3\", {\n          'flex-col': __props.column\n        }])\n      }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.options, (value, key) => {\n        return _openBlock(), _createElementBlock(\"label\", {\n          key: key,\n          class: _normalizeClass([__props.type, \"mr-6 mb-3 last:mr-0\"])\n        }, [_withDirectives(_createElementVNode(\"input\", {\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _isRef(computedValue) ? computedValue.value = $event : null),\n          type: _unref(inputType),\n          name: __props.name,\n          value: key\n        }, null, 8, _hoisted_1), [[_vModelDynamic, _unref(computedValue)]]), _hoisted_2, _createElementVNode(\"span\", _hoisted_3, _toDisplayString(value), 1)], 2);\n      }), 128))], 2);\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/components/CheckRadioPicker.vue"],"names":[],"mappings":";;;;;;;;;;AACA,SAAS,QAAT,QAAyB,KAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,UAAM,aAAa,GAAG,QAAQ,CAAC;AAC7B,MAAA,GAAG,EAAE,MAAM,KAAK,CAAC,UADY;AAE7B,MAAA,GAAG,EAAE,KAAK,IAAI;AACZ,QAAA,IAAI,CAAC,mBAAD,EAAsB,KAAtB,CAAJ;AACD;AAJ4B,KAAD,CAA9B;AAOA,UAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAN,KAAe,OAAf,GAAyB,OAAzB,GAAmC,UAA1C,CAA1B","sourcesContent":["<script setup>\nimport { computed } from 'vue'\n\nconst props = defineProps({\n  options: {\n    type: Object,\n    default: () => {}\n  },\n  name: {\n    type: String,\n    required: true\n  },\n  type: {\n    type: String,\n    default: 'checkbox'\n  },\n  column: Boolean,\n  modelValue: {\n    type: [Object, Array, String, Number],\n    default: null\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst computedValue = computed({\n  get: () => props.modelValue,\n  set: value => {\n    emit('update:modelValue', value)\n  }\n})\n\nconst inputType = computed(() => props.type === 'radio' ? 'radio' : 'checkbox')\n</script>\n\n<template>\n  <div\n    class=\"flex justify-start flex-wrap -mb-3\"\n    :class=\"{'flex-col':column}\"\n  >\n    <label\n      v-for=\"(value, key) in options\"\n      :key=\"key\"\n      :class=\"type\"\n      class=\"mr-6 mb-3 last:mr-0\"\n    >\n      <input\n        v-model=\"computedValue\"\n        :type=\"inputType\"\n        :name=\"name\"\n        :value=\"key\"\n      >\n      <span class=\"check\" />\n      <span class=\"control-label\">{{ value }}</span>\n    </label>\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}