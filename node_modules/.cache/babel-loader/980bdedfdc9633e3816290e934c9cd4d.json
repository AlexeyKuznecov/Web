{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue';\nimport { useStore } from 'vuex';\nimport ControlIcon from '@/components/ControlIcon.vue';\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: null\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    autocomplete: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    options: {\n      type: Array,\n      default: null\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    modelValue: {\n      type: [String, Number, Boolean, Array, Object],\n      default: ''\n    },\n    required: Boolean,\n    borderless: Boolean,\n    transparent: Boolean,\n    ctrlKFocus: Boolean\n  },\n  emits: ['update:modelValue', 'right-icon-click'],\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n        emit = _ref.emit;\n    expose();\n    var props = __props;\n    var computedValue = computed({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(value) {\n        emit('update:modelValue', value);\n      }\n    });\n\n    var blur = function blur(e) {\n      emit('blur', e);\n    };\n\n    var inputElClass = computed(function () {\n      var base = ['px-3 py-2 max-w-full focus:ring focus:outline-none border-gray-700 rounded w-full', 'dark:placeholder-gray-400', computedType.value === 'textarea' ? 'h-24' : 'h-12', props.borderless ? 'border-0' : 'border', props.transparent ? 'bg-transparent' : 'bg-white dark:bg-gray-800'];\n\n      if (props.icon) {\n        base.push('pl-10');\n      }\n\n      return base;\n    });\n    var computedType = computed(function () {\n      return props.options ? 'select' : props.type;\n    });\n    var controlIconH = computed(function () {\n      return props.type === 'textarea' ? 'h-full' : 'h-12';\n    });\n    var store = useStore();\n    var inputEl = ref(null);\n\n    if (props.ctrlKFocus) {\n      var fieldFocusHook = function fieldFocusHook(e) {\n        if (e.ctrlKey && e.key === 'k') {\n          e.preventDefault();\n          inputEl.value.focus();\n        } else if (e.key === 'Escape') {\n          inputEl.value.blur();\n        }\n      };\n\n      onMounted(function () {\n        if (!store.state.isFieldFocusRegistered) {\n          window.addEventListener('keydown', fieldFocusHook);\n          store.commit('basic', {\n            key: 'isFieldFocusRegistered',\n            value: true\n          });\n        } else {// console.error('Duplicate field focus event')\n        }\n      });\n      onBeforeUnmount(function () {\n        window.removeEventListener('keydown', fieldFocusHook);\n        store.commit('basic', {\n          key: 'isFieldFocusRegistered',\n          value: false\n        });\n      });\n    }\n\n    var __returned__ = {\n      props: props,\n      emit: emit,\n      computedValue: computedValue,\n      blur: blur,\n      inputElClass: inputElClass,\n      computedType: computedType,\n      controlIconH: controlIconH,\n      store: store,\n      inputEl: inputEl,\n      computed: computed,\n      ref: ref,\n      onMounted: onMounted,\n      onBeforeUnmount: onBeforeUnmount,\n      useStore: useStore,\n      ControlIcon: ControlIcon\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/components/Control.vue"],"names":[],"mappings":";AACA,SAAS,QAAT,EAAmB,GAAnB,EAAwB,SAAxB,EAAmC,eAAnC,QAA0D,KAA1D;AACA,SAAS,QAAT,QAAyB,MAAzB;AACA,OAAO,WAAP,MAAwB,8BAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,QAAM,aAAa,GAAG,QAAQ,CAAC;AAC7B,MAAA,GAAG,EAAE;AAAA,eAAM,KAAK,CAAC,UAAZ;AAAA,OADwB;AAE7B,MAAA,GAAG,EAAE,aAAA,KAAK,EAAI;AACZ,QAAA,IAAI,CAAC,mBAAD,EAAsB,KAAtB,CAAJ;AACD;AAJ4B,KAAD,CAA9B;;AAOA,QAAM,IAAI,GAAG,SAAP,IAAO,CAAA,CAAC,EAAI;AAChB,MAAA,IAAI,CAAC,MAAD,EAAS,CAAT,CAAJ;AACD,KAFD;;AAIA,QAAM,YAAY,GAAG,QAAQ,CAAC,YAAM;AAClC,UAAM,IAAI,GAAG,CACX,mFADW,EAEX,2BAFW,EAGX,YAAY,CAAC,KAAb,KAAuB,UAAvB,GAAoC,MAApC,GAA6C,MAHlC,EAIX,KAAK,CAAC,UAAN,GAAmB,UAAnB,GAAgC,QAJrB,EAKX,KAAK,CAAC,WAAN,GAAoB,gBAApB,GAAuC,2BAL5B,CAAb;;AAQA,UAAI,KAAK,CAAC,IAAV,EAAgB;AACd,QAAA,IAAI,CAAC,IAAL,CAAU,OAAV;AACD;;AAED,aAAO,IAAP;AACD,KAd4B,CAA7B;AAgBA,QAAM,YAAY,GAAG,QAAQ,CAAC;AAAA,aAAM,KAAK,CAAC,OAAN,GAAgB,QAAhB,GAA2B,KAAK,CAAC,IAAvC;AAAA,KAAD,CAA7B;AAEA,QAAM,YAAY,GAAG,QAAQ,CAAC;AAAA,aAAM,KAAK,CAAC,IAAN,KAAe,UAAf,GAA4B,QAA5B,GAAuC,MAA7C;AAAA,KAAD,CAA7B;AAEA,QAAM,KAAK,GAAG,QAAQ,EAAtB;AAEA,QAAM,OAAO,GAAG,GAAG,CAAC,IAAD,CAAnB;;AAEA,QAAI,KAAK,CAAC,UAAV,EAAsB;AACpB,UAAM,cAAc,GAAG,SAAjB,cAAiB,CAAA,CAAC,EAAI;AAC1B,YAAI,CAAC,CAAC,OAAF,IAAa,CAAC,CAAC,GAAF,KAAU,GAA3B,EAAgC;AAC9B,UAAA,CAAC,CAAC,cAAF;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACD,SAHD,MAGO,IAAI,CAAC,CAAC,GAAF,KAAU,QAAd,EAAwB;AAC7B,UAAA,OAAO,CAAC,KAAR,CAAc,IAAd;AACD;AACF,OAPD;;AASA,MAAA,SAAS,CAAC,YAAM;AACd,YAAI,CAAC,KAAK,CAAC,KAAN,CAAY,sBAAjB,EAAyC;AACvC,UAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,cAAnC;AAEA,UAAA,KAAK,CAAC,MAAN,CAAa,OAAb,EAAsB;AACpB,YAAA,GAAG,EAAE,wBADe;AAEpB,YAAA,KAAK,EAAE;AAFa,WAAtB;AAID,SAPD,MAOO,CACL;AACD;AACF,OAXQ,CAAT;AAaA,MAAA,eAAe,CAAC,YAAM;AACpB,QAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,cAAtC;AAEA,QAAA,KAAK,CAAC,MAAN,CAAa,OAAb,EAAsB;AACpB,UAAA,GAAG,EAAE,wBADe;AAEpB,UAAA,KAAK,EAAE;AAFa,SAAtB;AAID,OAPc,CAAf;AAQD","sourcesContent":["<script setup>\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { useStore } from 'vuex'\nimport ControlIcon from '@/components/ControlIcon.vue'\n\nconst props = defineProps({\n  name: {\n    type: String,\n    default: null\n  },\n  id: {\n    type: String,\n    default: null\n  },\n  autocomplete: {\n    type: String,\n    default: null\n  },\n  placeholder: {\n    type: String,\n    default: null\n  },\n  icon: {\n    type: String,\n    default: null\n  },\n  options: {\n    type: Array,\n    default: null\n  },\n  type: {\n    type: String,\n    default: 'text'\n  },\n  modelValue: {\n    type: [String, Number, Boolean, Array, Object],\n    default: ''\n  },\n  required: Boolean,\n  borderless: Boolean,\n  transparent: Boolean,\n  ctrlKFocus: Boolean\n})\n\nconst emit = defineEmits(['update:modelValue', 'right-icon-click'])\n\nconst computedValue = computed({\n  get: () => props.modelValue,\n  set: value => {\n    emit('update:modelValue', value)\n  }\n})\n\nconst blur = e => {\n  emit('blur', e)\n}\n\nconst inputElClass = computed(() => {\n  const base = [\n    'px-3 py-2 max-w-full focus:ring focus:outline-none border-gray-700 rounded w-full',\n    'dark:placeholder-gray-400',\n    computedType.value === 'textarea' ? 'h-24' : 'h-12',\n    props.borderless ? 'border-0' : 'border',\n    props.transparent ? 'bg-transparent' : 'bg-white dark:bg-gray-800'\n  ]\n\n  if (props.icon) {\n    base.push('pl-10')\n  }\n\n  return base\n})\n\nconst computedType = computed(() => props.options ? 'select' : props.type)\n\nconst controlIconH = computed(() => props.type === 'textarea' ? 'h-full' : 'h-12')\n\nconst store = useStore()\n\nconst inputEl = ref(null)\n\nif (props.ctrlKFocus) {\n  const fieldFocusHook = e => {\n    if (e.ctrlKey && e.key === 'k') {\n      e.preventDefault()\n      inputEl.value.focus()\n    } else if (e.key === 'Escape') {\n      inputEl.value.blur()\n    }\n  }\n\n  onMounted(() => {\n    if (!store.state.isFieldFocusRegistered) {\n      window.addEventListener('keydown', fieldFocusHook)\n\n      store.commit('basic', {\n        key: 'isFieldFocusRegistered',\n        value: true\n      })\n    } else {\n      // console.error('Duplicate field focus event')\n    }\n  })\n\n  onBeforeUnmount(() => {\n    window.removeEventListener('keydown', fieldFocusHook)\n\n    store.commit('basic', {\n      key: 'isFieldFocusRegistered',\n      value: false\n    })\n  })\n}\n</script>\n\n<template>\n  <div class=\"relative\">\n    <select\n      v-if=\"computedType === 'select'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :name=\"name\"\n      :class=\"inputElClass\"\n    >\n      <option\n        v-for=\"option in options\"\n        :key=\"option.id ?? option\"\n        :value=\"option\"\n      >\n        {{ option.label ?? option }}\n      </option>\n    </select>\n    <textarea\n      v-else-if=\"computedType === 'textarea'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :class=\"inputElClass\"\n      :name=\"name\"\n      :placeholder=\"placeholder\"\n      :required=\"required\"\n    />\n    <input\n      v-else\n      :id=\"id\"\n      ref=\"inputEl\"\n      v-model=\"computedValue\"\n      :name=\"name\"\n      :autocomplete=\"autocomplete\"\n      :required=\"required\"\n      :placeholder=\"placeholder\"\n      :type=\"computedType\"\n      :class=\"inputElClass\"\n      @blur=\"blur\"\n    >\n    <control-icon\n      v-if=\"icon\"\n      :icon=\"icon\"\n      :h=\"controlIconH\"\n    />\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}