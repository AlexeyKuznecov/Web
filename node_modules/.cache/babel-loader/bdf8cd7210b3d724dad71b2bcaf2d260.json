{"ast":null,"code":"import { normalizeClass as _normalizeClass, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex items-stretch justify-start relative\"\n};\nconst _hoisted_2 = {\n  class: \"inline-flex\"\n};\nconst _hoisted_3 = [\"accept\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  class: \"inline-flex px-4 py-2 justify-center bg-gray-100 border-gray-200 border rounded-r\"\n};\nimport { mdiUpload } from '@mdi/js';\nimport { computed, ref, watch } from 'vue';\nimport JbButton from '@/components/JbButton.vue';\nexport default {\n  props: {\n    modelValue: {\n      type: [Object, File, Array],\n      default: null\n    },\n    label: {\n      type: String,\n      default: 'Upload'\n    },\n    icon: {\n      type: String,\n      default: mdiUpload\n    },\n    accept: {\n      type: String,\n      default: null\n    },\n    color: {\n      type: String,\n      default: 'info'\n    }\n  },\n  emits: ['update:modelValue'],\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const root = ref(null);\n    const file = ref(props.modelValue);\n    const modelValueProp = computed(() => props.modelValue);\n    watch(modelValueProp, value => {\n      file.value = value;\n\n      if (!value) {\n        root.value.input.value = null;\n      }\n    });\n\n    const upload = event => {\n      const value = event.target.files || event.dataTransfer.files;\n      file.value = value[0];\n      emit('update:modelValue', file.value); // Use this as an example for handling file uploads\n      // let formData = new FormData()\n      // formData.append('file', file.value)\n      // const mediaStoreRoute = `/your-route/`\n      // axios\n      //   .post(mediaStoreRoute, formData, {\n      //     headers: {\n      //       'Content-Type': 'multipart/form-data'\n      //     },\n      //     onUploadProgress: progressEvent\n      //   })\n      //   .then(r => {\n      //\n      //   })\n      //   .catch(err => {\n      //\n      //   })\n    }; // const uploadPercent = ref(0)\n    //\n    // const progressEvent = progressEvent => {\n    //   uploadPercent.value = Math.round(\n    //     (progressEvent.loaded * 100) / progressEvent.total\n    //   )\n    // }\n\n\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"label\", _hoisted_2, [_createVNode(JbButton, {\n        as: \"a\",\n        label: __props.label,\n        icon: __props.icon,\n        color: __props.color,\n        class: _normalizeClass({\n          'rounded-r-none': file.value\n        })\n      }, null, 8, [\"label\", \"icon\", \"color\", \"class\"]), _createElementVNode(\"input\", {\n        ref_key: \"root\",\n        ref: root,\n        type: \"file\",\n        class: \"absolute top-0 left-0 w-full h-full opacity-0 outline-none cursor-pointer -z-1\",\n        accept: __props.accept,\n        onInput: upload\n      }, null, 40, _hoisted_3)]), file.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString(file.value.name), 1)])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/components/FilePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,SAAS,SAAT,QAA0B,SAA1B;AACA,SAAS,QAAT,EAAmB,GAAnB,EAAwB,KAAxB,QAAqC,KAArC;AACA,OAAO,QAAP,MAAqB,2BAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,UAAM,IAAI,GAAG,GAAG,CAAC,IAAD,CAAhB;AAEA,UAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,UAAP,CAAhB;AAEA,UAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,UAAb,CAA/B;AAEA,IAAA,KAAK,CAAC,cAAD,EAAiB,KAAK,IAAI;AAC7B,MAAA,IAAI,CAAC,KAAL,GAAa,KAAb;;AAEA,UAAI,CAAC,KAAL,EAAY;AACV,QAAA,IAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,KAAjB,GAAyB,IAAzB;AACD;AACF,KANI,CAAL;;AAQA,UAAM,MAAM,GAAG,KAAK,IAAI;AACtB,YAAM,KAAK,GAAG,KAAK,CAAC,MAAN,CAAa,KAAb,IAAsB,KAAK,CAAC,YAAN,CAAmB,KAAvD;AAEA,MAAA,IAAI,CAAC,KAAL,GAAa,KAAK,CAAC,CAAD,CAAlB;AAEA,MAAA,IAAI,CAAC,mBAAD,EAAsB,IAAI,CAAC,KAA3B,CAAJ,CALsB,CAOtB;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA1BD,C,CA4BA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["<script setup>\nimport { mdiUpload } from '@mdi/js'\nimport { computed, ref, watch } from 'vue'\nimport JbButton from '@/components/JbButton.vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: [Object, File, Array],\n    default: null\n  },\n  label: {\n    type: String,\n    default: 'Upload'\n  },\n  icon: {\n    type: String,\n    default: mdiUpload\n  },\n  accept: {\n    type: String,\n    default: null\n  },\n  color: {\n    type: String,\n    default: 'info'\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst root = ref(null)\n\nconst file = ref(props.modelValue)\n\nconst modelValueProp = computed(() => props.modelValue)\n\nwatch(modelValueProp, value => {\n  file.value = value\n\n  if (!value) {\n    root.value.input.value = null\n  }\n})\n\nconst upload = event => {\n  const value = event.target.files || event.dataTransfer.files\n\n  file.value = value[0]\n\n  emit('update:modelValue', file.value)\n\n  // Use this as an example for handling file uploads\n  // let formData = new FormData()\n  // formData.append('file', file.value)\n\n  // const mediaStoreRoute = `/your-route/`\n\n  // axios\n  //   .post(mediaStoreRoute, formData, {\n  //     headers: {\n  //       'Content-Type': 'multipart/form-data'\n  //     },\n  //     onUploadProgress: progressEvent\n  //   })\n  //   .then(r => {\n  //\n  //   })\n  //   .catch(err => {\n  //\n  //   })\n}\n\n// const uploadPercent = ref(0)\n//\n// const progressEvent = progressEvent => {\n//   uploadPercent.value = Math.round(\n//     (progressEvent.loaded * 100) / progressEvent.total\n//   )\n// }\n</script>\n\n<template>\n  <div class=\"flex items-stretch justify-start relative\">\n    <label class=\"inline-flex\">\n      <jb-button\n        as=\"a\"\n        :label=\"label\"\n        :icon=\"icon\"\n        :color=\"color\"\n        :class=\"{ 'rounded-r-none': file }\"\n      />\n      <input\n        ref=\"root\"\n        type=\"file\"\n        class=\"absolute top-0 left-0 w-full h-full opacity-0 outline-none cursor-pointer -z-1\"\n        :accept=\"accept\"\n        @input=\"upload\"\n      >\n    </label>\n    <div v-if=\"file\">\n      <span class=\"inline-flex px-4 py-2 justify-center bg-gray-100 border-gray-200 border rounded-r\">{{ file.name }}</span>\n    </div>\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}