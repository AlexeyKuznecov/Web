{"ast":null,"code":"import _defineProperty from \"/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _actions, _mutations;\n\nimport \"core-js/modules/es.object.to-string.js\";\nimport { AUTH_REQUEST, AUTH_ERROR, AUTH_SUCCESS, AUTH_LOGOUT, AUTH_REGISTER } from '../actions/auth';\nimport axios from 'axios';\nvar state = {\n  token: localStorage.getItem('user-token') || '',\n  status: '',\n  hasLoadedOnce: false\n};\nvar getters = {\n  isAuthenticated: function isAuthenticated(state) {\n    return !!state.token;\n  },\n  authStatus: function authStatus(state) {\n    return state.status;\n  }\n};\nvar actions = (_actions = {}, _defineProperty(_actions, AUTH_REQUEST, function (_ref, user) {\n  var commit = _ref.commit;\n  return new Promise(function (resolve, reject) {\n    commit(AUTH_REQUEST);\n    var url = 'https://web.leadertask.com/api/v1/users/auth?login=' + user.email + '&password=' + user.password;\n    axios({\n      url: url,\n      method: 'POST'\n    }).then(function (resp) {\n      localStorage.setItem('user-token', resp.data.access_token);\n      localStorage.setItem('user-refresh-token', resp.data.refresh_token);\n      axios.defaults.headers.common[\"Authorization\"] = resp.data.access_token;\n      commit(AUTH_SUCCESS, resp);\n      resolve(resp);\n    }).catch(function (err) {\n      commit(AUTH_ERROR, err);\n      localStorage.removeItem('user-token');\n      reject(err);\n    });\n  });\n}), _defineProperty(_actions, AUTH_REGISTER, function (_ref2, user) {\n  var commit = _ref2.commit;\n  return new Promise(function (resolve, reject) {\n    commit(AUTH_REGISTER);\n    var url = 'https://web.leadertask.com/api/v1/users/new';\n    axios.post(url, user).then(function (resp) {\n      console.log(resp);\n      localStorage.setItem('user-token', resp.data.access_token);\n      localStorage.setItem('user-refresh-token', resp.data.refresh_token);\n      axios.defaults.headers.common['Authorization'] = resp.data.access_token;\n      commit(AUTH_SUCCESS, resp);\n      resolve(resp);\n    }).catch(function (err) {\n      console.log(err.message);\n      commit(AUTH_ERROR, err);\n      localStorage.removeItem('user-token');\n      reject(err);\n    });\n  });\n}), _defineProperty(_actions, AUTH_LOGOUT, function (_ref3) {\n  var commit = _ref3.commit;\n  return new Promise(function (resolve, reject) {\n    commit(AUTH_LOGOUT);\n    var url = 'https://web.leadertask.com/api/v1/account/exit';\n    axios.get(url).then(function (resp) {\n      console.log(resp);\n      resolve(resp);\n    }).catch(function (err) {\n      console.log(err.message);\n      commit(AUTH_ERROR, err);\n      localStorage.removeItem('user-token');\n      localStorage.removeItem('user-refresh-token');\n      reject(err);\n    });\n    localStorage.removeItem('user-token');\n    localStorage.removeItem('user-refresh-token');\n    resolve();\n  });\n}), _actions);\nvar mutations = (_mutations = {}, _defineProperty(_mutations, AUTH_REQUEST, function (state) {\n  state.status = \"loading\";\n}), _defineProperty(_mutations, AUTH_REGISTER, function (state) {\n  state.status = \"loading\";\n}), _defineProperty(_mutations, AUTH_SUCCESS, function (state, resp) {\n  state.status = \"success\";\n  state.token = resp.data.access_token;\n  state.hasLoadedOnce = true;\n}), _defineProperty(_mutations, AUTH_ERROR, function (state) {\n  state.status = \"error\";\n  state.hasLoadedOnce = true;\n}), _defineProperty(_mutations, AUTH_LOGOUT, function (state) {\n  state.token = \"\";\n}), _mutations);\nexport default {\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/store/modules/auth.js"],"names":["AUTH_REQUEST","AUTH_ERROR","AUTH_SUCCESS","AUTH_LOGOUT","AUTH_REGISTER","axios","state","token","localStorage","getItem","status","hasLoadedOnce","getters","isAuthenticated","authStatus","actions","user","commit","Promise","resolve","reject","url","email","password","method","then","resp","setItem","data","access_token","refresh_token","defaults","headers","common","catch","err","removeItem","post","console","log","message","get","mutations"],"mappings":"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","sourcesContent":["import {\n  AUTH_REQUEST,\n  AUTH_ERROR,\n  AUTH_SUCCESS,\n  AUTH_LOGOUT,\n  AUTH_REGISTER\n} from '../actions/auth'\nimport axios from 'axios'\n\nconst state = {\n  token: localStorage.getItem('user-token') || '',\n  status: '',\n  hasLoadedOnce: false\n}\n\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  authStatus: state => state.status\n}\n\nconst actions = {\n  [AUTH_REQUEST]: ({ commit }, user) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_REQUEST)\n      const url = 'https://web.leadertask.com/api/v1/users/auth?login=' + user.email + '&password=' + user.password\n      axios({ url: url, method: 'POST' }) \n      .then(resp => {\n          localStorage.setItem('user-token', resp.data.access_token)\n          localStorage.setItem('user-refresh-token', resp.data.refresh_token)\n          axios.defaults.headers.common[\"Authorization\"] = resp.data.access_token\n          commit(AUTH_SUCCESS, resp)\n          resolve(resp)\n      }).catch(err => {\n          commit(AUTH_ERROR, err);\n          localStorage.removeItem('user-token');\n          reject(err);\n      })\n    })\n  },\n  [AUTH_REGISTER]: ({ commit }, user) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_REGISTER)\n      const url = 'https://web.leadertask.com/api/v1/users/new'\n      axios.post(url, user) \n      .then(resp => {\n          console.log(resp)\n          localStorage.setItem('user-token', resp.data.access_token)\n          localStorage.setItem('user-refresh-token', resp.data.refresh_token)\n          axios.defaults.headers.common['Authorization'] = resp.data.access_token\n          commit(AUTH_SUCCESS, resp)\n          resolve(resp) })\n        .catch(err => {\n          console.log(err.message)       \n          commit(AUTH_ERROR, err)\n          localStorage.removeItem('user-token')\n          reject(err)\n        })\n    })\n  },\n  [AUTH_LOGOUT]: ({ commit }) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_LOGOUT);\n      const url = 'https://web.leadertask.com/api/v1/account/exit'\n      axios.get(url) \n      .then(resp => {\n          console.log(resp)\n          resolve(resp); \n      }) .catch(err => {\n        console.log(err.message)       \n        commit(AUTH_ERROR, err)\n        localStorage.removeItem('user-token')\n        localStorage.removeItem('user-refresh-token')\n        reject(err)\n      });\n      localStorage.removeItem('user-token')\n      localStorage.removeItem('user-refresh-token')\n      resolve()\n    });\n  }\n};\n\nconst mutations = {\n  [AUTH_REQUEST]: state => {\n    state.status = \"loading\";\n  },\n  [AUTH_REGISTER]: state => {\n    state.status = \"loading\";\n  },\n  [AUTH_SUCCESS]: (state, resp) => {\n    state.status = \"success\";\n    state.token = resp.data.access_token;\n    state.hasLoadedOnce = true;\n  },\n  [AUTH_ERROR]: state => {\n    state.status = \"error\";\n    state.hasLoadedOnce = true;\n  },\n  [AUTH_LOGOUT]: state => {\n    state.token = \"\";\n  }\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};\n"]},"metadata":{},"sourceType":"module"}