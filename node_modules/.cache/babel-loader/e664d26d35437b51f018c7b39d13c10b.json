{"ast":null,"code":"import { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, isRef as _isRef, vModelSelect as _vModelSelect, normalizeClass as _normalizeClass, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, vModelText as _vModelText, vModelDynamic as _vModelDynamic, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"relative\"\n};\nconst _hoisted_2 = [\"id\", \"name\"];\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = [\"id\", \"name\", \"placeholder\", \"required\"];\nconst _hoisted_5 = [\"id\", \"name\", \"autocomplete\", \"required\", \"placeholder\", \"type\"];\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue';\nimport { useStore } from 'vuex';\nimport ControlIcon from '@/components/ControlIcon.vue';\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: null\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    autocomplete: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    options: {\n      type: Array,\n      default: null\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    modelValue: {\n      type: [String, Number, Boolean, Array, Object],\n      default: ''\n    },\n    required: Boolean,\n    borderless: Boolean,\n    transparent: Boolean,\n    ctrlKFocus: Boolean\n  },\n  emits: ['update:modelValue', 'right-icon-click'],\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const computedValue = computed({\n      get: () => props.modelValue,\n      set: value => {\n        emit('update:modelValue', value);\n      }\n    });\n\n    const blur = e => {\n      emit('blur', e);\n    };\n\n    const inputElClass = computed(() => {\n      const base = ['px-3 py-2 max-w-full focus:ring focus:outline-none border-gray-700 rounded w-full', 'dark:placeholder-gray-400', computedType.value === 'textarea' ? 'h-24' : 'h-12', props.borderless ? 'border-0' : 'border', props.transparent ? 'bg-transparent' : 'bg-white dark:bg-gray-800'];\n\n      if (props.icon) {\n        base.push('pl-10');\n      }\n\n      return base;\n    });\n    const computedType = computed(() => props.options ? 'select' : props.type);\n    const controlIconH = computed(() => props.type === 'textarea' ? 'h-full' : 'h-12');\n    const store = useStore();\n    const inputEl = ref(null);\n\n    if (props.ctrlKFocus) {\n      const fieldFocusHook = e => {\n        if (e.ctrlKey && e.key === 'k') {\n          e.preventDefault();\n          inputEl.value.focus();\n        } else if (e.key === 'Escape') {\n          inputEl.value.blur();\n        }\n      };\n\n      onMounted(() => {\n        if (!store.state.isFieldFocusRegistered) {\n          window.addEventListener('keydown', fieldFocusHook);\n          store.commit('basic', {\n            key: 'isFieldFocusRegistered',\n            value: true\n          });\n        } else {// console.error('Duplicate field focus event')\n        }\n      });\n      onBeforeUnmount(() => {\n        window.removeEventListener('keydown', fieldFocusHook);\n        store.commit('basic', {\n          key: 'isFieldFocusRegistered',\n          value: false\n        });\n      });\n    }\n\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_unref(computedType) === 'select' ? _withDirectives((_openBlock(), _createElementBlock(\"select\", {\n        key: 0,\n        id: __props.id,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _isRef(computedValue) ? computedValue.value = $event : null),\n        name: __props.name,\n        class: _normalizeClass(_unref(inputElClass))\n      }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.options, option => {\n        return _openBlock(), _createElementBlock(\"option\", {\n          key: option.id ?? option,\n          value: option\n        }, _toDisplayString(option.label ?? option), 9, _hoisted_3);\n      }), 128))], 10, _hoisted_2)), [[_vModelSelect, _unref(computedValue)]]) : _unref(computedType) === 'textarea' ? _withDirectives((_openBlock(), _createElementBlock(\"textarea\", {\n        key: 1,\n        id: __props.id,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _isRef(computedValue) ? computedValue.value = $event : null),\n        class: _normalizeClass(_unref(inputElClass)),\n        name: __props.name,\n        placeholder: __props.placeholder,\n        required: __props.required\n      }, null, 10, _hoisted_4)), [[_vModelText, _unref(computedValue)]]) : _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n        key: 2,\n        id: __props.id,\n        ref_key: \"inputEl\",\n        ref: inputEl,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _isRef(computedValue) ? computedValue.value = $event : null),\n        onBlur: blur,\n        name: __props.name,\n        autocomplete: __props.autocomplete,\n        required: __props.required,\n        placeholder: __props.placeholder,\n        type: _unref(computedType),\n        class: _normalizeClass(_unref(inputElClass))\n      }, null, 42, _hoisted_5)), [[_vModelDynamic, _unref(computedValue)]]), __props.icon ? (_openBlock(), _createBlock(ControlIcon, {\n        key: 3,\n        icon: __props.icon,\n        h: _unref(controlIconH)\n      }, null, 8, [\"icon\", \"h\"])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/components/Control.vue"],"names":[],"mappings":";;;;;;;;AACA,SAAS,QAAT,EAAmB,GAAnB,EAAwB,SAAxB,EAAmC,eAAnC,QAA0D,KAA1D;AACA,SAAS,QAAT,QAAyB,MAAzB;AACA,OAAO,WAAP,MAAwB,8BAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,UAAM,aAAa,GAAG,QAAQ,CAAC;AAC7B,MAAA,GAAG,EAAE,MAAM,KAAK,CAAC,UADY;AAE7B,MAAA,GAAG,EAAE,KAAK,IAAI;AACZ,QAAA,IAAI,CAAC,mBAAD,EAAsB,KAAtB,CAAJ;AACD;AAJ4B,KAAD,CAA9B;;AAOA,UAAM,IAAI,GAAG,CAAC,IAAI;AAChB,MAAA,IAAI,CAAC,MAAD,EAAS,CAAT,CAAJ;AACD,KAFD;;AAIA,UAAM,YAAY,GAAG,QAAQ,CAAC,MAAM;AAClC,YAAM,IAAI,GAAG,CACX,mFADW,EAEX,2BAFW,EAGX,YAAY,CAAC,KAAb,KAAuB,UAAvB,GAAoC,MAApC,GAA6C,MAHlC,EAIX,KAAK,CAAC,UAAN,GAAmB,UAAnB,GAAgC,QAJrB,EAKX,KAAK,CAAC,WAAN,GAAoB,gBAApB,GAAuC,2BAL5B,CAAb;;AAQA,UAAI,KAAK,CAAC,IAAV,EAAgB;AACd,QAAA,IAAI,CAAC,IAAL,CAAU,OAAV;AACD;;AAED,aAAO,IAAP;AACD,KAd4B,CAA7B;AAgBA,UAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,OAAN,GAAgB,QAAhB,GAA2B,KAAK,CAAC,IAAxC,CAA7B;AAEA,UAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAN,KAAe,UAAf,GAA4B,QAA5B,GAAuC,MAA9C,CAA7B;AAEA,UAAM,KAAK,GAAG,QAAQ,EAAtB;AAEA,UAAM,OAAO,GAAG,GAAG,CAAC,IAAD,CAAnB;;AAEA,QAAI,KAAK,CAAC,UAAV,EAAsB;AACpB,YAAM,cAAc,GAAG,CAAC,IAAI;AAC1B,YAAI,CAAC,CAAC,OAAF,IAAa,CAAC,CAAC,GAAF,KAAU,GAA3B,EAAgC;AAC9B,UAAA,CAAC,CAAC,cAAF;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,KAAd;AACD,SAHD,MAGO,IAAI,CAAC,CAAC,GAAF,KAAU,QAAd,EAAwB;AAC7B,UAAA,OAAO,CAAC,KAAR,CAAc,IAAd;AACD;AACF,OAPD;;AASA,MAAA,SAAS,CAAC,MAAM;AACd,YAAI,CAAC,KAAK,CAAC,KAAN,CAAY,sBAAjB,EAAyC;AACvC,UAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,cAAnC;AAEA,UAAA,KAAK,CAAC,MAAN,CAAa,OAAb,EAAsB;AACpB,YAAA,GAAG,EAAE,wBADe;AAEpB,YAAA,KAAK,EAAE;AAFa,WAAtB;AAID,SAPD,MAOO,CACL;AACD;AACF,OAXQ,CAAT;AAaA,MAAA,eAAe,CAAC,MAAM;AACpB,QAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,cAAtC;AAEA,QAAA,KAAK,CAAC,MAAN,CAAa,OAAb,EAAsB;AACpB,UAAA,GAAG,EAAE,wBADe;AAEpB,UAAA,KAAK,EAAE;AAFa,SAAtB;AAID,OAPc,CAAf;AAQD","sourcesContent":["<script setup>\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { useStore } from 'vuex'\nimport ControlIcon from '@/components/ControlIcon.vue'\n\nconst props = defineProps({\n  name: {\n    type: String,\n    default: null\n  },\n  id: {\n    type: String,\n    default: null\n  },\n  autocomplete: {\n    type: String,\n    default: null\n  },\n  placeholder: {\n    type: String,\n    default: null\n  },\n  icon: {\n    type: String,\n    default: null\n  },\n  options: {\n    type: Array,\n    default: null\n  },\n  type: {\n    type: String,\n    default: 'text'\n  },\n  modelValue: {\n    type: [String, Number, Boolean, Array, Object],\n    default: ''\n  },\n  required: Boolean,\n  borderless: Boolean,\n  transparent: Boolean,\n  ctrlKFocus: Boolean\n})\n\nconst emit = defineEmits(['update:modelValue', 'right-icon-click'])\n\nconst computedValue = computed({\n  get: () => props.modelValue,\n  set: value => {\n    emit('update:modelValue', value)\n  }\n})\n\nconst blur = e => {\n  emit('blur', e)\n}\n\nconst inputElClass = computed(() => {\n  const base = [\n    'px-3 py-2 max-w-full focus:ring focus:outline-none border-gray-700 rounded w-full',\n    'dark:placeholder-gray-400',\n    computedType.value === 'textarea' ? 'h-24' : 'h-12',\n    props.borderless ? 'border-0' : 'border',\n    props.transparent ? 'bg-transparent' : 'bg-white dark:bg-gray-800'\n  ]\n\n  if (props.icon) {\n    base.push('pl-10')\n  }\n\n  return base\n})\n\nconst computedType = computed(() => props.options ? 'select' : props.type)\n\nconst controlIconH = computed(() => props.type === 'textarea' ? 'h-full' : 'h-12')\n\nconst store = useStore()\n\nconst inputEl = ref(null)\n\nif (props.ctrlKFocus) {\n  const fieldFocusHook = e => {\n    if (e.ctrlKey && e.key === 'k') {\n      e.preventDefault()\n      inputEl.value.focus()\n    } else if (e.key === 'Escape') {\n      inputEl.value.blur()\n    }\n  }\n\n  onMounted(() => {\n    if (!store.state.isFieldFocusRegistered) {\n      window.addEventListener('keydown', fieldFocusHook)\n\n      store.commit('basic', {\n        key: 'isFieldFocusRegistered',\n        value: true\n      })\n    } else {\n      // console.error('Duplicate field focus event')\n    }\n  })\n\n  onBeforeUnmount(() => {\n    window.removeEventListener('keydown', fieldFocusHook)\n\n    store.commit('basic', {\n      key: 'isFieldFocusRegistered',\n      value: false\n    })\n  })\n}\n</script>\n\n<template>\n  <div class=\"relative\">\n    <select\n      v-if=\"computedType === 'select'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :name=\"name\"\n      :class=\"inputElClass\"\n    >\n      <option\n        v-for=\"option in options\"\n        :key=\"option.id ?? option\"\n        :value=\"option\"\n      >\n        {{ option.label ?? option }}\n      </option>\n    </select>\n    <textarea\n      v-else-if=\"computedType === 'textarea'\"\n      :id=\"id\"\n      v-model=\"computedValue\"\n      :class=\"inputElClass\"\n      :name=\"name\"\n      :placeholder=\"placeholder\"\n      :required=\"required\"\n    />\n    <input\n      v-else\n      :id=\"id\"\n      ref=\"inputEl\"\n      v-model=\"computedValue\"\n      @blur=\"blur\"\n      :name=\"name\"\n      :autocomplete=\"autocomplete\"\n      :required=\"required\"\n      :placeholder=\"placeholder\"\n      :type=\"computedType\"\n      :class=\"inputElClass\"\n    >\n    <control-icon\n      v-if=\"icon\"\n      :icon=\"icon\"\n      :h=\"controlIconH\"\n    />\n  </div>\n</template>\n"]},"metadata":{},"sourceType":"module"}