{"ast":null,"code":"import { AUTH_REQUEST, AUTH_ERROR, AUTH_SUCCESS, AUTH_LOGOUT, AUTH_REGISTER } from '../actions/auth';\nimport axios from 'axios';\nconst state = {\n  token: localStorage.getItem('user-token') || '',\n  status: '',\n  hasLoadedOnce: false\n};\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  authStatus: state => state.status\n};\nconst actions = {\n  [AUTH_REQUEST]: ({\n    commit\n  }, user) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_REQUEST);\n      const url = 'https://web.leadertask.com/api/v1/users/auth?login=' + user.email + '&password=' + user.password;\n      axios({\n        url: url,\n        method: 'POST'\n      }).then(resp => {\n        localStorage.setItem('user-token', resp.data.access_token);\n        localStorage.setItem('user-refresh-token', resp.data.refresh_token);\n        axios.defaults.headers.common.Authorization = resp.data.access_token;\n        commit(AUTH_SUCCESS, resp);\n        resolve(resp);\n      }).catch(err => {\n        commit(AUTH_ERROR, err);\n        localStorage.removeItem('user-token');\n        reject(err);\n      });\n    });\n  },\n  [AUTH_REGISTER]: ({\n    commit\n  }, user) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_REGISTER);\n      const url = 'https://web.leadertask.com/api/v1/users/new';\n      axios.post(url, user).then(resp => {\n        console.log(resp);\n        localStorage.setItem('user-token', resp.data.access_token);\n        localStorage.setItem('user-refresh-token', resp.data.refresh_token);\n        axios.defaults.headers.common.Authorization = resp.data.access_token;\n        commit(AUTH_SUCCESS, resp);\n        resolve(resp);\n      }).catch(err => {\n        console.log(err.message);\n        commit(AUTH_ERROR, err);\n        localStorage.removeItem('user-token');\n        reject(err);\n      });\n    });\n  },\n  [AUTH_LOGOUT]: ({\n    commit\n  }) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_LOGOUT);\n      const url = 'https://web.leadertask.com/api/v1/account/exit';\n      axios.get(url).then(resp => {\n        console.log(resp);\n        resolve(resp);\n      }).catch(err => {\n        console.log(err.message);\n        commit(AUTH_ERROR, err);\n        localStorage.removeItem('user-token');\n        localStorage.removeItem('user-refresh-token');\n        reject(err);\n      });\n      localStorage.removeItem('user-token');\n      localStorage.removeItem('user-refresh-token');\n      resolve();\n    });\n  }\n};\nconst mutations = {\n  [AUTH_REQUEST]: state => {\n    state.status = 'loading';\n  },\n  [AUTH_REGISTER]: state => {\n    state.status = 'loading';\n  },\n  [AUTH_SUCCESS]: (state, resp) => {\n    state.status = 'success';\n    state.token = resp.data.access_token;\n    state.hasLoadedOnce = true;\n  },\n  [AUTH_ERROR]: state => {\n    state.status = 'error';\n    state.hasLoadedOnce = true;\n  },\n  [AUTH_LOGOUT]: state => {\n    state.token = '';\n  }\n};\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"sources":["/Users/dmitrygashilov/Projects/admin-one-vue-tailwind/src/store/modules/auth.js"],"names":["AUTH_REQUEST","AUTH_ERROR","AUTH_SUCCESS","AUTH_LOGOUT","AUTH_REGISTER","axios","state","token","localStorage","getItem","status","hasLoadedOnce","getters","isAuthenticated","authStatus","actions","commit","user","Promise","resolve","reject","url","email","password","method","then","resp","setItem","data","access_token","refresh_token","defaults","headers","common","Authorization","catch","err","removeItem","post","console","log","message","get","mutations"],"mappings":"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","sourcesContent":["import {\n  AUTH_REQUEST,\n  AUTH_ERROR,\n  AUTH_SUCCESS,\n  AUTH_LOGOUT,\n  AUTH_REGISTER\n} from '../actions/auth'\nimport axios from 'axios'\n\nconst state = {\n  token: localStorage.getItem('user-token') || '',\n  status: '',\n  hasLoadedOnce: false\n}\n\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  authStatus: state => state.status\n}\n\nconst actions = {\n  [AUTH_REQUEST]: ({ commit }, user) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_REQUEST)\n      const url = 'https://web.leadertask.com/api/v1/users/auth?login=' + user.email + '&password=' + user.password\n      axios({ url: url, method: 'POST' })\n        .then(resp => {\n          localStorage.setItem('user-token', resp.data.access_token)\n          localStorage.setItem('user-refresh-token', resp.data.refresh_token)\n          axios.defaults.headers.common.Authorization = resp.data.access_token\n          commit(AUTH_SUCCESS, resp)\n          resolve(resp)\n        }).catch(err => {\n          commit(AUTH_ERROR, err)\n          localStorage.removeItem('user-token')\n          reject(err)\n        })\n    })\n  },\n  [AUTH_REGISTER]: ({ commit }, user) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_REGISTER)\n      const url = 'https://web.leadertask.com/api/v1/users/new'\n      axios.post(url, user)\n        .then(resp => {\n          console.log(resp)\n          localStorage.setItem('user-token', resp.data.access_token)\n          localStorage.setItem('user-refresh-token', resp.data.refresh_token)\n          axios.defaults.headers.common.Authorization = resp.data.access_token\n          commit(AUTH_SUCCESS, resp)\n          resolve(resp)\n        }).catch(err => {\n          console.log(err.message)\n          commit(AUTH_ERROR, err)\n          localStorage.removeItem('user-token')\n          reject(err)\n        })\n    })\n  },\n  [AUTH_LOGOUT]: ({ commit }) => {\n    return new Promise((resolve, reject) => {\n      commit(AUTH_LOGOUT)\n      const url = 'https://web.leadertask.com/api/v1/account/exit'\n      axios.get(url)\n        .then(resp => {\n          console.log(resp)\n          resolve(resp)\n        }).catch(err => {\n          console.log(err.message)\n          commit(AUTH_ERROR, err)\n          localStorage.removeItem('user-token')\n          localStorage.removeItem('user-refresh-token')\n          reject(err)\n        })\n      localStorage.removeItem('user-token')\n      localStorage.removeItem('user-refresh-token')\n      resolve()\n    })\n  }\n}\n\nconst mutations = {\n  [AUTH_REQUEST]: state => {\n    state.status = 'loading'\n  },\n  [AUTH_REGISTER]: state => {\n    state.status = 'loading'\n  },\n  [AUTH_SUCCESS]: (state, resp) => {\n    state.status = 'success'\n    state.token = resp.data.access_token\n    state.hasLoadedOnce = true\n  },\n  [AUTH_ERROR]: state => {\n    state.status = 'error'\n    state.hasLoadedOnce = true\n  },\n  [AUTH_LOGOUT]: state => {\n    state.token = ''\n  }\n}\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n}\n"]},"metadata":{},"sourceType":"module"}