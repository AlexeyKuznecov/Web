<script setup>
import { reactive, computed } from 'vue'
import { useRouter } from 'vue-router'
import axios from 'axios'
import store from '@/store'
import { mdiEmailOutline, mdiEyeOffOutline, mdiAccountOutline, mdiArrowRight, mdiCheck } from '@mdi/js'
import FullScreenSection from '@/components/FullScreenSection.vue'
import CardComponent from '@/components/CardComponent.vue'
import Field from '@/components/Field.vue'
import Control from '@/components/Control.vue'
import JbButton from '@/components/JbButton.vue'
// import JbButtons from '@/components/JbButtons.vue'

import { AUTH_REQUEST, AUTH_REGISTER } from '@/store/actions/auth'

const localization = computed(() => store.state.localization.localization)

const form = reactive({
  email: '',
  password: '',
  username: '',
  showError: false,
  errorMessage: '',
  emailMdi: mdiEmailOutline,
  emailIconClass: '',
  startScreenText: localization.value.EnterLeaderTask
})

const showValues = reactive({
  showRegisterInputsValue: false,
  showLoginInputsValue: false
})

const router = useRouter()

const submit = () => {
  if (showValues.showLoginInputsValue) {
    login()
  } else if (showValues.showRegisterInputsValue) {
    register()
  }
}

const getOSName = () => {
  let detectOS = 'web'

  if (navigator.appVersion.indexOf('Mac') !== -1) {
    detectOS = 'mac'
  } else if (navigator.appVersion.indexOf('Win') !== -1) {
    detectOS = 'windows'
  } else if (navigator.appVersion.indexOf('Android') !== -1) {
    detectOS = 'android'
  } else if (navigator.appVersion.indexOf('iPhone') !== -1) {
    detectOS = 'ios'
  }

  return detectOS
}

const isMobile = () => {
  return navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i)
}

const getSysType = () => {
  return isMobile() ? 'mobile' : 'desktop'
}

const login = () => {
  const uri = 'https://web.leadertask.com/api/v1/users/auth?login=' + form.email + '&password=' + form.password + '&system=' + getOSName() + '&type_device=' + getSysType()
  store.dispatch(AUTH_REQUEST, uri)
    .then(() => {
      router.push('/')
    })
    .catch(() => {
      form.showError = true
      form.errorMessage = localization.value.InvalidNameOrPassword
    })
}

const register = () => {
  if (!form.password || !form.username) { return }
  const data = {
    email: form.email,
    password: form.password,
    name: form.username,
    system: 'web',
    language: 'russian',
    type_device: 'mobile'
  }
  store.dispatch(AUTH_REGISTER, data)
    .then(() => {
      router.push('/')
    })
    .catch(() => {
      form.showError = true
      form.errorMessage = 'Unknown error'
    })
}

const hideLoginInputs = () => {
  showValues.showLoginInputsValue = false
}

const showLoginInputs = () => {
  showValues.showLoginInputsValue = true
  hideRegisterInputs()
}

const hideRegisterInputs = () => {
  showValues.showRegisterInputsValue = false
}

const showRegisterInputs = () => {
  showValues.showRegisterInputsValue = true
  hideLoginInputs()
}

const checkEmailExistense = () => {
  if (form.email) {
    const uri = 'https://web.leadertask.com/api/v1/users/exists?email=' + form.email
    axios.get(uri)
      .then(() => {
        showLoginInputs()
        form.emailMdi = mdiCheck
        form.startScreenText = localization.value.hithere
        form.emailIconClass = 'text-lime-500'
      })
      .catch(() => {
        showRegisterInputs()
        form.emailMdi = mdiCheck
        form.startScreenText = localization.value.create_account
        form.emailIconClass = 'text-lime-500'
      })
  }
}

</script>
<template>
  <full-screen-section
    v-slot="{ cardClass, cardRounded }"
    bg="leadertask"
  >
    <card-component
      :class="cardClass"
      :rounded="cardRounded"
      form
      @submit.prevent="submit"
    >
      <p class="pb-4 pt-5 text-center text-2xl font-bold">
        {{ form.startScreenText }}
      </p>
      <field>
        <control
          v-model="form.email"
          :icon="form.emailMdi"
          name="email"
          :iconClass="form.emailIconClass"
          autocomplete="email"
          required
          @blur="checkEmailExistense"
          @keyup.enter="checkEmailExistense"
        />
      </field>

      <transition-group name="slide-fade">
        <div v-if="showValues.showLoginInputsValue">
          <field>
            <control
              v-model="form.password"
              :icon="mdiEyeOffOutline"
              type="password"
              name="password"
              autocomplete="current-password"
              :placeholder="localization.Password"
            />
          </field>
          <p
            v-if="form.showError"
            class="text-red-400"
          >
            {{ form.errorMessage }}
          </p>
          <jb-button
            type="submit"
            class="w-full rounded-lg"
            color="login"
            :icon="mdiArrowRight"
            :label="localization.EnterSystem"
          />
          <a 
            href=""
            class="text-xs mt-5 text-blue-500 underline decoration-1"
          >
            {{ localization.forgot_pass }}
          </a>
        </div>
      </transition-group>

      <transition-group name="slide-fade">
        <div v-if="showValues.showRegisterInputsValue">
          <field
            :help="localization.PasswordMin"
          >
            <control
              v-model="form.password"
              :icon="mdiEyeOffOutline"
              type="password"
              name="password"
              :placeholder="localization.Password"
              autocomplete="current-password"
            />
          </field>

          <field
            :help="localization.EnterYourName"
          >
            <control
              v-model="form.username"
              type="text"
              :icon="mdiAccountOutline"
              name="username"
              autocomplete="username"
              :placeholder="Username"
            />
          </field>

          <jb-button
            type="submit"
            color="login"
            class="w-full rounded-lg"
            :icon="mdiArrowRight"
            :label="localization.create_account"
          />
        </div>
      </transition-group>
    </card-component>
  </full-screen-section>
</template>

<style>
.error-message {
  color: #8D021F;
  font-size: 14px;
}

.slide-fade-enter-active {
  transition: all 0.2s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.2s cubic-bezier(1, 0.5, 0.8, 1);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(45px);
  opacity: 0;
}
</style>
