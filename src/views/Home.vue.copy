<script setup>
import { ref } from 'vue'
// import 'he-tree-vue/dist/he-tree-vue.css'
// import { Tree, Draggable, Fold } from 'he-tree-vue'
import { TreeViewComponent } from '@syncfusion/ej2-vue-navigations'

// import { useStore } from 'vuex'
// import {
// mdiAccountMultiple,
// mdiCartOutline,
// mdiChartTimelineVariant,
// mdiFinance,
// mdiMonitorCellphone,
// mdiReload
// mdiGithub,
// mdiChartPie
// } from '@mdi/js'
// import * as chartConfig from '@/components/Charts/chart.config.js'
// import LineChart from '@/components/Charts/LineChart.vue'
import MainSection from '@/components/MainSection.vue'
// import TitleBar from '@/components/TitleBar.vue'
// import HeroBar from '@/components/HeroBar.vue'
// import CardWidget from '@/components/CardWidget.vue'
// import CardComponent from '@/components/CardComponent.vue'
// import ClientsTable from '@/components/ClientsTable.vue'
// import Notification from '@/components/Notification.vue'
// import JbButton from '@/components/JbButton.vue'
// import CardTransactionBar from '@/components/CardTransactionBar.vue'
// import CardClientBar from '@/components/CardClientBar.vue'
// import TitleSubBar from '@/components/TitleSubBar.vue'

// const titleStack = ref(['Admin', 'Dashboard'])

var data = [
  {
    nodeId: '01',
    nodeText: 'Music',
    nodeChild: [
      { nodeId: '01-01', nodeText: 'Gouttes.mp3' }
    ]
  },
  {
    nodeId: '02',
    nodeText: 'Videos',
    expanded: true,
    nodeChild: [
      { nodeId: '02-01', nodeText: 'Naturals.mp4' },
      { nodeId: '02-02', nodeText: 'Wild.mpeg' }
    ]
  },
  {
    nodeId: '03',
    nodeText: 'Documents',
    nodeChild: [
      { nodeId: '03-01', nodeText: 'Environment Pollution.docx' },
      { nodeId: '03-02', nodeText: 'Global Water, Sanitation, & Hygiene.docx' },
      { nodeId: '03-03', nodeText: 'Global Warming.ppt' },
      { nodeId: '03-04', nodeText: 'Social Network.pdf' },
      { nodeId: '03-05', nodeText: 'Youth Empowerment.pdf' }
    ]
  }
]

const fields = ref({ dataSource: data, id: 'nodeId', text: 'nodeText', child: 'nodeChild' })
// const treeData = ref([{ text: 'node 1' }, { text: 'node 2', children: [{ text: 'node 2-1' }] }, { text: 'node 3' }, { text: 'node 4' }, { text: 'node 5' }, { text: 'node 6' }])

// const MyTreeComponent = Tree.mixPlugins([Draggable, Fold])

// const store = useStore()
// const clientBarItems = computed(() => store.state.clients.slice(0, 3))
// const transactionBarItems = computed(() => store.state.history.slice(0, 3))
// const darkMode = computed(() => store.state.darkMode)

</script>

<template>
  <!-- <title-bar :title-stack="titleStack" /> -->
  <!-- <hero-bar>Dashboard</hero-bar> -->
  <main-section>
    <!-- <notification
      color="info"
      :icon="mdiGithub"
    >
      Please star this project on
      <a
        href="https://github.com/justboil/admin-one-vue-tailwind"
        class="underline"
        target="_blank"
      <template #right>
        <jb-button
          href="https://github.com/justboil/admin-one-vue-tailwind"
          :icon="mdiGithub"
          :outline="darkMode"
          label="GitHub"
          target="_blank"
          small
        />
      </template>
    </notification> -->
    <!-- <div class="grid grid-cols-1 gap-6 lg:grid-cols-3 mb-6">
      <card-widget
        trend="12%"
        trend-type="up"
        color="text-emerald-500"
        :icon="mdiAccountMultiple"
        :number="512"
        label="Clients"
      />
      <card-widget
        trend="12%"
        trend-type="down"
        color="text-blue-500"
        :icon="mdiCartOutline"
        :number="7770"
        prefix="$"
        label="Sales"
      />
      <card-widget
        trend="Overflow"
        trend-type="alert"
        color="text-red-500"
        :icon="mdiChartTimelineVariant"
        :number="256"
        suffix="%"
        label="Performance"
      />
    </div> -->

    <!-- <div class="grid grid-cols-1 xl:grid-cols-2 gap-6 mb-6">
      <div class="flex flex-col justify-between">
        <card-transaction-bar
          v-for="(transaction,index) in transactionBarItems"
          :key="index"
          :amount="transaction.amount"
          :date="transaction.date"
          :business="transaction.business"
          :type="transaction.type"
          :name="transaction.name"
          :account="transaction.account"
        />
      </div>
      <div class="flex flex-col justify-between">
        <card-client-bar
          v-for="client in clientBarItems"
          :key="client.id"
          :name="client.name"
          :login="client.login"
          :date="client.created"
          :progress="client.progress"
        />
      </div>
    </div>

    <title-sub-bar
      :icon="mdiChartPie"
      title="Trends overview"
    /> -->

    <!-- <card-component
      title="Performance"
      :icon="mdiFinance"
      :header-icon="mdiReload"
      class="mb-6"
      @header-icon-click="fillChartData"
    >
      <div v-if="chartData">
        <line-chart
          :data="chartData"
          class="h-96"
        />
      </div>
    </card-component>

    <title-sub-bar
      :icon="mdiAccountMultiple"
      title="Clients"
    />

    <notification
      color="info"
      :icon="mdiMonitorCellphone"
    >
      <b>Responsive table.</b> Collapses on mobile
    </notification>

    <card-component
      :icon="mdiMonitorCellphone"
      title="Responsive table"
      has-table
    >
      <clients-table />
    </card-component> -->
    <!-- <Tree :value="treeData" edgeScroll></Tree> -->
    <!-- <MyTreeComponent :value="treeData" edgeScroll v-slot="{node, path, tree}">
      <b @click="tree.toggleFold(node, path)">
        {{ node.$folded && node.children ? '+' : '' }}
        {{ !node.$folded && node.children ? '-' : '' }}
      </b>
      {{ node.text }}
    </MyTreeComponent> -->
    <TreeViewComponent
      id='treeview'
      :fields='fields'
      :allowDragAndDrop='true'
      :allowMultiSelection='true'
    >
    </TreeViewComponent>
  </main-section>
</template>

<style>
.he-tree .tree-node{
  border: 1px solid #ccc;
  margin-bottom: 5px;
  padding: 5px;
}
.he-tree--hidden{
  display: none;
}
.he-tree--rtl{
  direction: rtl;
}
.he-tree .tree-placeholder{
}
.he-tree .tree-placeholder-node{
  background: #ddf2f9;
  border: 1px dashed #00d9ff;
  height: 20px;
}
.he-tree .dragging .tree-node-back:hover{
  background-color: inherit;
}
</style>
